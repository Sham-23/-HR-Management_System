@model EmployeeManagementSystemCore.Models.Employee

@{
    ViewBag.Title = "EditEmp";
    //var data = (EmployeeManagementSystem.Models.Employee)ViewData["model"];

    var role = (EmployeeManagementSystemCore.Models.Role)ViewData["roleOptions"];
    var Designation = (EmployeeManagementSystemCore.Models.Designation)ViewData["designationOptions"];

    var roleOptions = new List<SelectListItem>() @*{ new SelectListItem { Text = "Select Role", Value = "Select Role" } }*@;
    foreach (var item in role.RolesList)
    {
        roleOptions.Add(new SelectListItem() { Text = item.RoleName, Value = item.RoleId.ToString() });
    }

    var DesignationOptions = new List<SelectListItem>() @*{ new SelectListItem { Text = "Select Designation", Value = "Select Designation" } }*@;
    foreach (var item in Designation.DesignationsList)
    {
        DesignationOptions.Add(new SelectListItem() { Text = item.DesignationName, Value = item.DesignationId.ToString() });
    }

    string empcode = Model.EmployeeCode;
    DateTime dt = DateTime.Now.AddYears(-18);
    string dt1 = dt.ToString("yyyy-MM-dd");
    string doj = DateTime.Now.ToString("yyyy-MM-dd");
    string DateOfBirth = (Model.DOB).ToString("yyyy-MM-dd");
    string DateOfJoining = (Model.DOJ).ToString("yyyy-MM-dd");
    


}


@if (Convert.ToInt32((Session["role"]).ToString()) == 1 && ViewBag.EditEmp == null)
{



    using (Html.BeginForm("UpdateEmpDetails", "Admin", Model))
    {
        @Html.AntiForgeryToken()
                    <div class="form-horizontal mx-auto align-center  " id="AddNewMainDiv">
                        <h4 class="addEmp">Employee Details</h4>
                        <hr id="addemphr" />

                        @Html.ValidationSummary(true, "", new { @class = "text-danger" })


                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.EmployeeCode, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Employee Code</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.EmployeeCode, new { htmlAttributes = new { @class = "form-control", placeholder=$"{empcode}", required = "required", pattern = "[0-9]{1,3}", disabled = "true" } })

                                @Html.ValidationMessageFor(model => model.EmployeeCode, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.FirstName, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">First Name</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.FirstName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your First Name ", @minlength = "2", @maxlength = "50", @required = "required", oninput = "InvalidMsgFirstName(this);", oninvalid = "setCustomValidity('Please Enter Valid First Name')", pattern = "[A-Za-z]{2,50}" } })
                                @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.MiddleName, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Middle Name</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.MiddleName, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Middle Name ", @maxlength = "50", pattern = "[A-Za-z]{2,50}" } })
                                @Html.ValidationMessageFor(model => model.MiddleName, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.LastName, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Last Name</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.LastName, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Last Name ",
                                        @minlength = "2",
                                        @maxlength = "50",
                                        @required = "required",
                                        oninput = "InvalidMsgLastName(this);"@*oninput = "InvalidMsgLastName(this);"*@,
                    oninvalid = "setCustomValidity('Please Enter Valid Last Name')",
                    pattern = "[A-Za-z]{2,50}"
                    }
                    })
                                @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Email</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Email ", required = "required", oninput = "InvalidMsgEmail(this);", oninvalid = "InvalidMsgEmail(this);", type = "email", pattern = "^\\S+@\\S+\\.\\S+$" } })
                                @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6 ">
                            @* @Html.LabelFor(model => model.DOB, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Date Of Birth</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.DOB, new { htmlAttributes = new { @class = "dateofbirth form-control", placeholder = "Enter Your DOB ", required = "required", oninvalid = "InvalidMsgDOB(this);", type = "date", max = dt1 } })

                                @Html.ValidationMessageFor(model => model.DOB, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.Gender, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Gender</label>
                            <div class="col-md-8">
                                @*@Html.EditorFor(model => model.Gender, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Gender " } })
                                *@
                                @Html.DropDownList("Gender", new List<SelectListItem>
                                          {
                    /*                                  new SelectListItem { Text = "Select Gender", Value = "Gender", Selected=true},
                    */                                  new SelectListItem { Text = "Male", Value = "Male"},

                                              new SelectListItem { Text = "Female", Value = "Female"},

                                           }, htmlAttributes: new { @class = "tex-left Role-Down select-add-Gender", required = "required", oninput = "InvalidMsgGender(this);", oninvalid = "setCustomValidity('Please Select Gender!')" })


                                @Html.ValidationMessageFor(model => model.Gender, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.BloodGroup, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Blood Group</label>
                            <div class="col-md-8">
                                @*@Html.EditorFor(model => model.BloodGroup, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Bloodgroup " } })*@
                                @Html.DropDownList("BloodGroup", new List<SelectListItem>
                                          {
                    /*                                  new SelectListItem { Text = "Select Blood Group", Value = "Not Selected", Selected=true},
                    */                                new SelectListItem { Text = "A+", Value = "A+"},
                                              new SelectListItem { Text = "A-", Value = "A-"},
                                              new SelectListItem { Text = "B+", Value = "B+"},
                                              new SelectListItem { Text = "B-", Value = "B-"},
                                              new SelectListItem { Text = "AB+",Value = "AB+"},
                                              new SelectListItem { Text = "AB-",Value = "AB-"},
                                              new SelectListItem { Text = "O+", Value = "O+"},
                                              new SelectListItem { Text = "O-", Value = "O-"}

                                           }, htmlAttributes: new { @class = "text-left Role-Down select-add-Blood-Group", required = "required", oninvalid = "setCustomValidity('Please Select Blood Group!')" })
                                @Html.ValidationMessageFor(model => model.BloodGroup, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.DOJ, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Date Of Joining</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.DOJ, new { htmlAttributes = new { @class = "dateofjoining form-control", placeholder = "Enter Your DOJ ", required = "required", oninvalid = "InvalidMsgDOJ(this);", type = "date" } })

                                @Html.ValidationMessageFor(model => model.DOJ, "", new { @class = "text-danger" })
                            </div>
                        </div>




                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.PersonalContact, htmlAttributes: new { @class = "control-label col-md-4 " })*@
                            <label class="control-label col-md-4">Personal Contact</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.PersonalContact, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Personal Contact ",
                                        required = "required",
                                        oninput = "InvalidMsgPersonalContact(this);",
                                        oninvalid = "setCustomValidity('Please Enter Valid Personal Contact Number')",@*type="phone",*@
                    pattern = "[0-9]{10,10}",
                    @minlength = "10",
                    @maxlength = "10",
                    type = "phone"
                    }
                    })


                                @Html.ValidationMessageFor(model => model.PersonalContact, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.EmergencyContact, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Emergency Contact</label>
                            <div class="col-md-8">


                                @Html.EditorFor(model => model.EmergencyContact, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Emergency Contact ",
                                   required = "required",
                                        oninput = "InvalidMsgEmergency(this);",
                                        oninvalid = "setCustomValidity('Please Enter Valid Emergency Number')",
                                        pattern = "[0-9]{10,10}",
                                        @minlength = 10,
                                        @maxlength = 10,
                                        type = "phone"
                                    }
                                })



                                @Html.ValidationMessageFor(model => model.EmergencyContact, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.AadharCardNo, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Aadhar Card</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.AadharCardNo, new
                                {
                                    htmlAttributes = new
                                    {

                                        @class = "form-control",
                               oninvalid = "setCustomValidity('Please Enter Valid Aadhaar Card Number')",
                                        placeholder = "Enter Your Aadhar No. ",
                                        required = "required",
                               @minlength = 12,
                               @maxlength = 12,
                                        min = 100000000000,
                               oninput = "InvalidMsgAdhaarcard(this);",
                               pattern = "[0-9]{12,12}"
                                    }
                    })

                                @Html.ValidationMessageFor(model => model.AadharCardNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.PancardNo, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Pancard Number</label>
                            <div class="col-md-8">


                                @Html.EditorFor(model => model.PancardNo, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Pan No. "
                               ,
                                        required = "required",
                                        oninput = "InvalidMsgPancard(this);",
                                        oninvalid = "setCustomValidity('Please Enter Valid Pancard Number')",
                               pattern = "[A-Z]{5}[0-9]{4}[A-Z]{1}",
                                        @minlength = 10,
                                        @maxlength = 10
                                    }
                                })


                                @Html.ValidationMessageFor(model => model.PancardNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.PassportNo, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Passport Number</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.PassportNo, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Passport No. ",
                               required = "required",
                                        oninput = "InvalidMsgPassport(this);",
                                        oninvalid = "setCustomValidity('Please Enter Valid Passport Number')"
                               ,
                                        @minlength = 12,
                                        @maxlength = 12,
                                        pattern = "[A-Z]{4}([0-9]{8})"
                                    }
                                })
                                @Html.ValidationMessageFor(model => model.PassportNo, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Address</label>
                            <div class="col-md-8">
                                @Html.TextAreaFor(model => model.Address, new { htmlAttributes = new { @class = "form-control", required = "required" }, required = "required", @style = "width:100%;min-height:110px;max-height: 125px;" })


                                @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })

                            </div>
                        </div>



                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.City, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">City</label>
                            <div class="col-md-8">
                                @Html.EditorFor(model => model.City, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your City", required = "required", oninput = "InvalidMsgCity(this);", oninvalid = "setCustomValidity('Please Enter Valid City')", @minlength = "2", @maxlength = "50", pattern = "[A-Za-z]{2,50}" } })
                                @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.State, htmlAttributes: new { @class = "control-label col-md-4 " })*@
                            <label class="control-label col-md-4">State</label>
                            <div class="col-md-8 ">
                                @Html.DropDownList("State", new List<SelectListItem>
                                {
                    /*                    new SelectListItem { Text = "Select State", Value = "Not Slected", Selected=true},
                    */                  new SelectListItem { Text = "Andhra Pradesh", Value = "Andhra Pradesh"},
                                new SelectListItem { Text = "Arunachal Pradesh", Value = "Arunachal Pradesh"},
                                new SelectListItem { Text = "Assam", Value = "Assam"},
                                new SelectListItem { Text = "Bihar", Value = "Bihar"},
                                new SelectListItem { Text = "Chhattisgarh", Value = "Chhattisgarh"},
                                new SelectListItem { Text = "Goa", Value = "Goa"},
                                new SelectListItem { Text = "Gujarat", Value = "Gujarat"},
                                new SelectListItem { Text = "Haryana", Value = "Haryana"},
                                new SelectListItem { Text = "Himachal Pradesh", Value = "Himachal Pradesh"},
                                new SelectListItem { Text = "Jharkhand", Value = "Jharkhand"},
                                new SelectListItem { Text = "Karnataka", Value = "Karnataka"},
                                new SelectListItem { Text = "Kerala", Value = "Kerala"},
                                new SelectListItem { Text = "Madhya Pradesh", Value = "Madhya Pradesh"},
                                new SelectListItem { Text = "Maharashtra", Value = "Maharashtra"},
                                new SelectListItem { Text = "Manipur", Value = "Manipur"},
                                new SelectListItem { Text = "Meghalaya", Value = "Meghalaya"},
                                new SelectListItem { Text = "Mizoram", Value = "Mizoram"},
                                new SelectListItem { Text = "Nagaland", Value = "Nagaland"},
                                new SelectListItem { Text = "Odisha", Value = "Odisha"},
                                new SelectListItem { Text = "Punjab", Value = "Punjab"},
                                new SelectListItem { Text = "Rajasthan", Value = "Rajasthan"},
                                new SelectListItem { Text = "Sikkim", Value = "Sikkim"},
                                new SelectListItem { Text = "Tamil Nadu", Value = "Tamil Nadu"},
                                new SelectListItem { Text = "Telangana", Value = "Telangana"},
                                new SelectListItem { Text = "Tripura", Value = "Tripura"},
                                new SelectListItem { Text = "Uttar Pradesh", Value = "Uttar Pradesh"},
                                new SelectListItem { Text = "Uttarakhand", Value = "Uttarakhand"},
                                new SelectListItem { Text = "West Bengal", Value = "West Bengal"},

                                }, htmlAttributes: new { @class = "Role-Down text-left select-add-state", required = "required", oninvalid = "onSelectoption(this)" })


                                @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger ", required = "required" })
                            </div>
                        </div>


                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.Pincode, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Pincode</label>
                            <div class="col-md-8">

                                @Html.EditorFor(model => model.Pincode, new
                                {
                                    htmlAttributes = new
                                    {
                                        @class = "form-control",
                                        placeholder = "Enter Your Pincode ",
                               oninput = "InvalidMsgPincode(this);",
                                        onvalidity = "setCustomValidity('Please Enter Valid pincode Number')",
                                        required = "required",
                               @minlength = 6,
                                        @maxlength = 6,
                                        pattern = "[0-9]{6,6}"
                                    }
                                })
                                @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                            </div>
                        </div>





                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.Role, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Role</label>
                            <div class="col-md-8  ">

                                @Html.DropDownListFor(model => model.RoleId, roleOptions, htmlAttributes: new
                                {
                                    @class = "text-left Role-Down select-add-Role",
                               required = "required"
                                })
                                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                            </div>
                        </div>


                        <div class="form-group col-md-6">
                            @*@Html.LabelFor(model => model.Designation, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4">Designation</label>
                            <div class="col-md-8">

                                @Html.DropDownListFor(model => model.DesignationId, DesignationOptions, htmlAttributes: new
                                {
                                    @class = "text-left Role-Down select-add-Designation",
                               required = "required"
                                })

                                @Html.ValidationMessageFor(model => model.RoleId, "", new { @class = "text-danger" })
                            </div>
                        </div>




                        <div class="form-group col-md-6">
                            @* @Html.LabelFor(model => model.Experienced, htmlAttributes: new { @class = "control-label col-md-4" })*@
                            <label class="control-label col-md-4 " for="seeAnotherField">Experienced</label>
                            <div class="col-md-8">
                                @*@Html.EditorFor(model => model.Experienced, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter Your Designation" } })
                                *@
                                @Html.DropDownList("Experienced", new List<SelectListItem>
                                {
                    /*                        new SelectListItem { Text = "Select Option", Selected=true},
                    */                        new SelectListItem { Text = "No", Value = "false"},
                                        new SelectListItem { Text = "Yes", Value ="true" },


                                }, htmlAttributes: new { @id = "seeAnotherField", @class = "text-left Role-Down select-add-Experience", required = "required" })
                                @Html.ValidationMessageFor(model => model.Experienced, "", new { @class = "text-danger" })

                            </div>


                        </div>


                                @if (Model.Experienced == true)
                                {
                                    <div class="form-group col-md-6 " id="otherFieldDiv">

                                        @* @Html.LabelFor(model => model.YearsOfExprience, htmlAttributes: new { @class = "control-label col-md-4" })*@
                                        <label class="control-label col-md-4" for="otherField">Years Of Experience</label>
                                        <div class="col-md-8">

                                            @Html.EditorFor(model => model.YearsOfExprience, new
                                            {
                                                htmlAttributes = new
                                                {
                                                    id = "otherField",
                                                    @class = " hideClass form-control otherField",
                                                    placeholder = "Enter Years Of Experience ",
                                           oninput = "InvalidMsgYearsofexperience(this);",
                                                    oninvalid = "setCustomValidity('Please Enter Valid Pancard Number')",
                                           min = 1,
                                                    max = 50
                                                }
                                            })
                                            @Html.ValidationMessageFor(model => model.YearsOfExprience, "", new { @class = "text-danger" })
                                        </div>
                                    </div>




                                    <div class="form-group col-md-10 " id="otherFieldDiv">
                                        @* @Html.LabelFor(model => model.PreviousCompanyName, htmlAttributes: new { @class = "control-label col-md-4 " })*@
                                        <label class="control-label col-md-4" for="otherField">Previous Company Name</label>
                                        <div class="col-md-7">
                                            @Html.EditorFor(model => model.PreviousCompanyName, new { htmlAttributes = new { id = "otherField", @class = "hideClass form-control otherField", placeholder = "Enter Previous Company Name ", oninput = "InvalidMsgPreviouscompany(this);", oninvalid = "setCustomValidity('Please Enter Valid Company Name')", pattern = "[A-Za-z]{2,50}" } })
                                            @Html.ValidationMessageFor(model => model.PreviousCompanyName, "", new { @class = "text-danger" })
                                        </div>
                                    </div>

                                }





                        <div class="form-group col-md-8  row justify-content-md-end">
                            <div class="col-md-2 col-sm-10 col ">
                                <input id="emp-create-btn" type="submit" value="Create" class="btn-primary btn-default " />
                                @*<button onclick="(confirm('do you w')) ? location.href = '  @Url.Action("AddNewEmp", "Admin")' : null;" id="emp-create-btn" class="btn-primary" type="button">Add</button>*@

                            </div>

                            <div class="col-md-2 col-sm-5 " style="width: 9.55%" id="add-Desi-back-list">
                                @Html.ActionLink("Back", "GetAllEmployeesDetails", "Admin")
                            </div>

                        </div>

                    </div>

      

    }

}
else if (ViewBag.EditEmp != null)
{
    <div>
        <p>
            @ViewBag.EditEmp
        </p>
    </div>
}
else
{
    <td> You are not Authorized </td>
}


<script type="text/javascript">

    function InvalidMsgFirstName(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the First Name!');
        }
        //else if (textbox.includes('#$%^&*()_+-!')) {
        //    textbox.setCustomValidity('Please Enter valid Email');
        //}
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgLastName(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Last Name!');
        }
        else if (textbox.validity.typeMismatch) {
            textbox.setCustomValidity('Please Enter valid Last Name');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgEmail(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Email!');
        }
        else if (textbox.validity.typeMismatch) {
            textbox.setCustomValidity('Please Enter valid Email');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgDOB(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Date of Birth!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }

    function InvalidMsgGender(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Gender!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgBloodGroup(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Blood Group!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgDOJ(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Date of Joining!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgPersonalContact(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Personal Contact!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgEmergency(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Emergency Contact!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgAdhaarcard(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Adhaar card!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgPancard(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Pan Card!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgPassport(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Valid Passport!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgAddress(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Address!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgCity(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the City !');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgState(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the State!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgPincode(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Pincode!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgRole(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Select the Role!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgDesignation(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Select the Designation!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgExperienced(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Specify the Experience!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgYearsofexperience(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Years of Experience!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    function InvalidMsgPreviousCompany(textbox) {

        if (textbox.value === '') {
            textbox.setCustomValidity
                ('Please Enter the Previous Company!');
        }
        else {
            textbox.setCustomValidity('');
        }

        return true;
    }
    $("#seeAnotherField").change(function () {
        var otherField = $("#AddNewMainDiv").find(".hideClass");
        console.log(otherField);
        if ($(this).val() == "true") {
            $(otherField).attr("disabled", false);
            $(otherField).attr('required', '');
            $(otherField).attr('data-error', 'This field is required.');
        } else {
            $(otherField).attr("disabled", true);
        }
    });



    function experiened() {
    
            
            document.querySelector(".select-add-Experience").value = '@Model.Experienced'.toLowerCase();

       
    }

   @* $(".select-add-Gender").prepend("<option value='' disabled selected>Select Gender...</option>");
    $(".select-add-Blood-Group").prepend("<option value='' disabled selected>Select Blood Group...</option>");
    $(".select-add-state").prepend("<option value='' disabled selected>Select State...</option>");

    $(".select-add-Experience").prepend("<option value='' disabled selected>Select Experience...</option>");*@


    $(".dateofbirth").val('@DateOfBirth');
    $(".dateofjoining").val('@DateOfJoining');
    $(".select-add-Gender").val('@Model.Gender');
    $(".select-add-Blood-Group").val('@Model.BloodGroup');
    $(".select-add-state").val('@Model.State');
    $(".select-add-Role").val('@Model.RoleId');
    $(".select-add-Designation").val('@Model.DesignationId');
    $(".select-add-Experience").val('@Model.Experienced');
    experiened();





</script>






